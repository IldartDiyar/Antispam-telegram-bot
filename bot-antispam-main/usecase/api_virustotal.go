package usecase

import (
	"encoding/base64"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"

	"diplomka/model"
	"diplomka/utils"
)

func VirusTotal(link string) bool {
	urlID := base64.RawURLEncoding.EncodeToString([]byte(link))
	var flag bool

	url := "https://www.virustotal.com/api/v3/urls/" + urlID

	if err := utils.LoadEnv(); err != nil {
		log.Fatal(err)
	}

	apiKey := utils.GetEnv("API_KEY")

	var auto model.AutoGenerated
	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("accept", "application/json")
	req.Header.Add("x-apikey", apiKey)

	res, _ := http.DefaultClient.Do(req)

	body, _ := ioutil.ReadAll(res.Body)
	if err := json.Unmarshal(body, &auto); err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()
	harmless := auto.Data.Attributes.TotalVotes.Harmless
	malicious := auto.Data.Attributes.TotalVotes.Malicious

	if harmless <= malicious {
		flag = true
	} else {
		flag = false
	}
	return flag
}
